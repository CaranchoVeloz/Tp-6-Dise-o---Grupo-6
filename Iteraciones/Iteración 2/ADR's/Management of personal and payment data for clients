Registro de Decisión Arquitectónica (ADR)

                                                                            Arquitectura basada en Microservicios para la Empresa de Productos Alimenticios


  La arquitectura monolítica existente en el sistema de la empresa de productos alimenticios es rígida y difícil de mantener. Para abordar este problema, la empresa planea migrar a una arquitectura basada en microservicios, que proporcionará una solución más escalable y flexible. La nueva arquitectura incluirá un componente del lado del cliente que accederá a los datos de la empresa alojados en dos bases de datos SQL. La lógica de negocio del sistema incluye varios módulos con diferentes niveles de criticidad, y la nueva arquitectura debe garantizar la seguridad y el rendimiento de estos módulos.


Factores Decisivos
  • Gestión de datos personales y de pago de los clientes
  • Manejo de solicitudes de pedidos de clientes y gestión de incidencias de entrega
  • Requisitos de escalabilidad y rendimiento del sistema
  • Aspectos de seguridad y rendimiento del sistema


Decisión Principal

  El sistema utilizará el patrón DAO (Data Access Object) para garantizar que los datos personales y de pago se accedan y manipulen de manera segura y eficiente, al mismo tiempo que proporciona una clara separación de responsabilidades entre la lógica de negocio y la capa de acceso a datos.
  El patrón DAO se utilizará para desacoplar la capa de acceso a datos de la lógica de negocio, lo que permitirá una arquitectura más modular y escalable. Sin embargo, la decisión no aborda explícitamente los aspectos de seguridad y rendimiento del sistema, que son críticos para los requisitos.

Decisiones Alternativas
  • Event Sourcing: Un enfoque alternativo al patrón DAO podría ser el uso de event sourcing, lo que permitiría una capa de acceso a datos más flexible y escalable.
  • Patrón de Repositorio: Otra alternativa podría ser usar el patrón de repositorio, que proporcionaría una capa de acceso a datos más robusta y mantenible.


Pros
  • El patrón DAO proporciona una clara separación de responsabilidades entre la lógica de negocio y la capa de acceso a datos.
  • El patrón DAO puede usarse para desacoplar la capa de acceso a datos de la lógica de negocio, lo que permite una arquitectura más modular y escalable.


Contras
  • El patrón DAO puede no ser capaz de proporcionar suficiente seguridad para los datos personales y de pago.
  • El patrón DAO puede no ser capaz de manejar los requisitos de rendimiento y escalabilidad del sistema.
  • Se podrían necesitar medidas adicionales de seguridad, optimización y desacoplamiento para implementar el patrón DAO de manera efectiva.



Evaluación

  La decisión de usar el patrón DAO es parcialmente apropiada para los requisitos. El patrón DAO proporciona una clara separación de responsabilidades entre la lógica de negocio y la capa de acceso a datos, lo cual es beneficioso para mantener una arquitectura limpia y escalable. Sin embargo, la decisión no aborda explícitamente los aspectos de seguridad y rendimiento del sistema, que son fundamentales para los requisitos.

Decisiones de Seguimiento

  Para implementar el patrón DAO de manera efectiva, podrían ser necesarias decisiones adicionales, como:
    • Implementar medidas de seguridad para garantizar la protección de los datos personales y de pago
    • Optimizar el rendimiento para asegurar la escalabilidad del sistema
    • Desacoplar el módulo de Entregas y Rutas para garantizar la escalabilidad y el rendimiento del módulo
